✨✨✨
game.h

#define ROW 3
#define COL 3 //定义ROW COL的原因：如要改动row col时，在这里改动即可，否则需要改动的太多

#include<stdio.h>

#include<stdlib.h>

#include<time.h>
//声明
void Initboard(char board[ROW][COL], int row, int col);

void Displayboard(char board[ROW][COL], int row, int col);

void PlayerMove(char board[ROW][COL], int row, int col);

void ComputerMove(char board[ROW][COL], int row,int col);

char Is_Winner(char board[ROW][COL], int row, int col);
//四种结果：
//玩家胜利 - '*'
//电脑胜利 - '#'
//平局 - 'D'//draw平局
//继续 - 'C'



game.c
#define _CRT_SECURE_NO_WARNINGS 1
#include"game.h"

//初始化定义
void Initboard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for(i=0 ; i<row ; i++)
	{
		for(j=0 ; j<col; j++)
		{
			board[i][j] = ' '; //让每一处都为空格
		}
	}

}

//打印定义
//void Displayboard(char board[ROW][COL], int row, int col)
//{
//	int i = 0;
//	for (i=0; i< row; i++)
//	{
//	//1.打印一行数据
//	printf(" %c | %c |%c \n",board[i][0],board[i][1],board[i][2]);
//	//2.打印分割行
//	if(i < row -1)
//	printf("---|---|---\n");
//	}
//}

void Displayboard(char board[ROW][COL], int row, int col) //✨
{
	int i = 0;
	int j = 0;
	for (i=0; i< row; i++)
	{
		//1.打印一行数据
		for(j=0; j < col; j++)
		{
			printf(" %c ",board[i][j]);
			if(j < col-1) //这里当j = col-1时，最右边一列的没有|
			{
				printf("|");
			}
	    }
		printf("\n"); //打印换行符

		//2.打印分割行
		if(i < row-1) //最下面一行没有---
		{
			for(j = 0; j < col; j++)
			{
				printf("---");
				if(j < col-1) //最右边一列的没有|  //✨✨三个if限制
				printf("|");
			}
			printf("\n");//打印换行符
		}
	}
}


void PlayerMove(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("玩家走:>\n");
	while(1)
	{
		printf("请输入要下的坐标:>");
		scanf("%d%d",&x, &y);
		//判断是否合法
		if(x>=1 && x<=row && y>=1 && y<=col) //玩家按照坐标输入
		{
			if(board[x - 1][y - 1] == ' ') //保证这个地方没有输入
			{
				board[x - 1][y - 1] = '*';
				break; //break不能忘！✨
			}
			else
			{
				printf("该坐标被占用\n");
			}
		}
		else
		{
			printf("坐标非法，请重新输入！\n");
		}
	}
}


void ComputerMove(char board[ROW][COL], int row,int col)
{
	
	int x = 0;
	int y = 0;
	printf("电脑走:>\n");
	while(1)
	{
	x = rand() % row; //随机数用row取余的余数在[0, row-1]之间
	y = rand() % col; //随机数用col取余的余数在[0, col-1]之间
	if(board[x][y] == ' ')
	{
		board[x][y] = '#';
		break;
	}
	}
}


//返回1棋盘满了，返回0棋盘没满✨
int Is_Full(char board[ROW][COL], int row, int col)
{
	int i = 0 ;
        int j = 0 ;
	for(i = 0; i <row; i++)
	{
		for(j = 0; j <col; j++)
		{
			if(board[i][j] == ' ')
				return 0; //没满输出0
		}
	}
	return 1;//满了输出1
}

char Is_Winner(char board[ROW][COL], int row, int col)
{
	int i = 0 ;
	//横行
	for(i = 0; i< row; i++)
	{
		if(board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][1] != ' ') //三个连续相等，但不是空格
		{
			return board[i][1]; //return 后不是一个字符，这适用于玩家胜利和电脑胜利两种情况✨
		}
	}

	//竖行
	for(i = 0; i< col; i++)
	{
		if(board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[1][i] != ' ')
		{
			return board[1][i];
		}
	}
	//对角线
	if(board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')
		return board[1][1];
	if(board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[1][1] != ' ')
		return board[1][1];

	//判断是否平局
	if(1 == Is_Full(board,row,col))//用函数完成✨
		return 'D'; //dogfall平局
	//否则继续
	return 'C';
}


test.c
#define _CRT_SECURE_NO_WARNINGS 1

#include"game.h" //头文件在game.h中
void menu () //菜单项
{
	printf("*************************\n");
	printf("***** 1.play 0.exit *****\n");
	printf("*************************\n");
}

//游戏的整个算法实现
void game()
{
	char ret = 0;
	//数组 - 存放走出的棋盘信息
	char board [ROW][COL] = {0}; 
	//初始化
	Initboard(board, ROW, COL); //全部为空格
	//打印
	Displayboard(board, ROW, COL);
	//下棋 //是一个循环
	while(1)
	{

	//玩家
	PlayerMove(board, ROW, COL);
	Displayboard(board, ROW, COL);
	//判断玩家是否胜利
	ret = Is_Winner(board, ROW, COL);
	if(ret != 'C') //不会显示继续，若为继续，则程序继续执行
	{
		break;
	}
	//电脑
	ComputerMove(board, ROW, COL);
	Displayboard(board, ROW, COL);
	//判断电脑是否失败
	ret = Is_Winner(board, ROW, COL);
	if(ret != 'C')
	{
		break;
	}
	}
	//下面根据输出内容，判断结果。✨
	 if(ret == '*')
	{
		printf("WINNER : player!\n");
	}
	else if(ret == '#')
	{
		printf("WINNER : computer!\n");
	}
	else
	{
		printf("dogfall!\n");
	}

}

int main()
{
	int choice = 0;
	srand((unsigned int )time(NULL)); //电脑随机下棋
	do
	{
	menu();
	
	printf("请选择:>\n");
	scanf("%d", &choice);

	switch(choice)
	{
	case 1:
		game();
		break;
	case 0:
		printf("退出程序\n");
		break;
	default:
		printf("输入错误，请重新输入\n");
		break;
	}
	}while(choice);

	return 0;
}

